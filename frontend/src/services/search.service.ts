import { Product, ProductApi } from "@/types/Product";
import { mapProduct } from "@/lib/mappers";

/**
 * G·ªçi API t√¨m ki·∫øm s·∫£n ph·∫©m theo query.
 * Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m ƒë√£ map v·ªÅ ki·ªÉu FE.
 */
export async function searchProducts(query: string): Promise<Product[]> {
  try {
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_API_URL}/products/search?query=${encodeURIComponent(query)}`,
      {
        next: { revalidate: 0 }, // üëà optional: disable caching (Next.js 13+)
      }
    );

    if (!res.ok) {
      console.error("‚ùå API tr·∫£ v·ªÅ l·ªói", res.status);
      throw new Error("Search failed");
    }

    const json = await res.json();
    const products = json.products;

    if (!Array.isArray(products)) {
      console.error("‚ùå D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:", json);
      throw new Error("Invalid product response");
    }

    // üü© Ghi log s·∫£n ph·∫©m ƒë·∫ßu ti√™n n·∫øu c·∫ßn
    // console.log("‚úÖ S·∫£n ph·∫©m ƒë·∫ßu ti√™n:", products[0]);

    return products.map((item: ProductApi) => mapProduct(item));
  } catch (err) {
    console.error("üî• L·ªói khi g·ªçi searchProducts:", err);
    return []; // fallback an to√†n
  }
}
