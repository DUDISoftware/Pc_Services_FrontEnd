import api from "@/lib/api";
import { Discount, DiscountCategoryService, DiscountCategoryServiceResponse, DiscountResponse } from "@/types/Discount";
import { DiscountService, DiscountServiceResponse } from "@/types/Discount";


export const discountService = {
  // üü¢ L·∫•y gi·∫£m gi√° theo productId
  async getByProductId(productId: string): Promise<Discount | null> {
    try {
      if (!productId || typeof productId !== "string" || productId.length !== 24) {
        throw new Error("productId kh√¥ng h·ª£p l·ªá");
      }

      //console.log("üì° GET discount at:", `/discounts/product/${productId}`);

      // G·ªçi ƒë√∫ng route backend: /discounts/product/:productId
      const res = await api.get<DiscountResponse>(`/discounts/product/${productId}`);

      const saleOfData = res.data?.discount?.SaleOf;

      if (!saleOfData) {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y discount cho s·∫£n ph·∫©m n√†y.");
        return null;
      }

      // Map d·ªØ li·ªáu backend ‚Üí model FE
      const discount: Discount = {
        _id: saleOfData._id,
        sale_off: saleOfData.sale_off,
        type: saleOfData.type,
        product_id: saleOfData.product_id,
        start_date: saleOfData.start_date,
        end_date: saleOfData.end_date,
        createdAt: saleOfData.createdAt,
        updatedAt: saleOfData.updatedAt,
      };

      return discount;
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y discount:", error);
      return null;
    }
  },
   // üü° C·∫≠p nh·∫≠t gi·∫£m gi√° theo productId
  async updateDiscount(productId: string, body: { sale_off: number, start_date:Date, end_date: Date}) {
    try {
      if (!productId || typeof productId !== "string" || productId.length !== 24) {
        throw new Error("productId kh√¥ng h·ª£p l·ªá");
      }

      console.log("üì° PUT update discount:", `/discounts/product/${productId}`, body);

      const res = await api.put(`/discounts/product/${productId}`, body);

      console.log("‚úÖ C·∫≠p nh·∫≠t gi·∫£m gi√° th√†nh c√¥ng:", res.data);
      return res.data.discount;
    } catch (error) {
      console.error("‚ùå L·ªói khi update discount:", error);
      throw error;
    }
  },  
  /// discount 
  async getByServiceId(serviceId: string): Promise<DiscountService | null> {
      try {
        if (!serviceId || typeof serviceId !== "string" || serviceId.length !== 24) {
          throw new Error("serviceId kh√¥ng h·ª£p l·ªá");
        }

        //console.log("üì° GET discount at:", `/discounts/service/${serviceId}`);

        const res = await api.get<DiscountServiceResponse>(`/discounts/service/${serviceId}`);

        const saleOfData = res.data?.discount?.SaleOf;

        if (!saleOfData) {
          console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y discount cho s·∫£n ph·∫©m n√†y.");
          return null;
        }

        // Map d·ªØ li·ªáu backend ‚Üí model FE
        const discount: DiscountService = {
          _id: saleOfData._id,
          sale_off: saleOfData.sale_off,
          type: saleOfData.type,
          service_id: saleOfData.service_id,
          start_date: saleOfData.start_date,
          end_date: saleOfData.end_date,
          createdAt: saleOfData.createdAt,
          updatedAt: saleOfData.updatedAt,
        };

        return discount;
      } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y discount:", error);
        return null;
      }
  },
  async updateDiscountService(serviceId: string, body: { sale_off: number, start_date:Date | null, end_date: Date | null}) {
      try {
        if (!serviceId || typeof serviceId !== "string" || serviceId.length !== 24) {
          throw new Error("serviceId kh√¥ng h·ª£p l·ªá");
        }

        console.log("üì° PUT update discount service:", `/discounts/service/${serviceId}`, body);

        const res = await api.put(`/discounts/service/${serviceId}`, body);

        console.log("‚úÖ C·∫≠p nh·∫≠t gi·∫£m gi√° d·ªãch v·ª• th√†nh c√¥ng:", res.data);
        return res.data.discount;
      } catch (error) {
        console.error("‚ùå L·ªói khi update discount service:", error);
        throw error;
      }
  },
    async createDiscount(productId: string,body: { sale_off: number; start_date: Date; end_date: Date }) {
      try {
        if (!productId || typeof productId !== "string" || productId.length !== 24) {
          throw new Error("productId kh√¥ng h·ª£p l·ªá");
        }
        console.log("üì° POST create discount:", `/discounts/product/${productId}`, body);
        const res = await api.post(`/discounts/product/${productId}`, body);
        console.log("‚úÖ T·∫°o gi·∫£m gi√° m·ªõi th√†nh c√¥ng:", res.data);
        return res.data.discount;
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o gi·∫£m gi√°:", error);
        throw error;
      }
  },
  async createService(ServiceId: string,body: { sale_off: number; start_date: Date; end_date: Date }) {
      try {
        if (!ServiceId || typeof ServiceId !== "string" || ServiceId.length !== 24) {
          throw new Error("productId kh√¥ng h·ª£p l·ªá");
        }
        console.log("üì° POST create service:", `/discounts/service/${ServiceId}`, body);
        const res = await api.post(`/discounts/service/${ServiceId}`, body);
        console.log("‚úÖ T·∫°o gi·∫£m gi√° m·ªõi th√†nh c√¥ng:", res.data);
        return res.data.discount || res.data;
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o gi·∫£m gi√°:", error);
        throw error;
      }
  },

  async createDiscountProductAll(body: { sale_off: number; start_date: Date; end_date: Date }) {
      try {
        const res = await api.post(`/discounts/productAll`, body);
        console.log("‚úÖ T·∫°o gi·∫£m gi√° m·ªõi th√†nh c√¥ng:", res.data);
        return res.data.discount;
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o gi·∫£m gi√°:", error);
        throw error;
      }
  },
  // üü¢ L·∫•y th√¥ng tin gi·∫£m gi√° chung cho t·∫•t c·∫£ s·∫£n ph·∫©m
  async getDiscountProductAll() {
      try {
        const res = await api.get("/discounts/productAll");
        console.log("‚úÖ L·∫•y gi·∫£m gi√° chung th√†nh c√¥ng:", res.data);

        // Ki·ªÉm tra v√† chu·∫©n h√≥a d·ªØ li·ªáu tr·∫£ v·ªÅ
        return res.data.discount?.SaleOf || null;
      } catch (error: any) {
        console.error("‚ùå L·ªói khi l·∫•y gi·∫£m gi√° chung:", error);
        throw error;
      }
  },
  async createDiscountServiceAll(body: { sale_off: number; start_date: Date; end_date: Date }) {
      try {
        const res = await api.post(`/discounts/serviceAll`, body);
        console.log("‚úÖ T·∫°o gi·∫£m gi√° m·ªõi th√†nh c√¥ng:", res.data);
        return res.data.discount;
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o gi·∫£m gi√°:", error);
        throw error;
      }
  },
  // üü¢ L·∫•y th√¥ng tin gi·∫£m gi√° chung cho t·∫•t c·∫£ s·∫£n ph·∫©m
  async getDiscountServicetAll() {
      try {
        const res = await api.get("/discounts/serviceAll");
        console.log("‚úÖ L·∫•y gi·∫£m gi√° chung th√†nh c√¥ng:", res.data);

        // Ki·ªÉm tra v√† chu·∫©n h√≥a d·ªØ li·ªáu tr·∫£ v·ªÅ
        return res.data.discount?.SaleOf || null;
      } catch (error: any) {
        console.error("‚ùå L·ªói khi l·∫•y gi·∫£m gi√° chung:", error);
        throw error;
      }
  },
  //
  async createCategoryDiscount(categoryId: string, body: { sale_off: number; start_date: Date; end_date: Date }) {
    try {
      if (!categoryId || typeof categoryId !== "string" || categoryId.length !== 24) {
        throw new Error("categoryId kh√¥ng h·ª£p l·ªá");
      }

      console.log("üì° POST create category discount:", `/discounts/categoryService/${categoryId}`, body);

      const res = await api.post(`/discounts/categoryService/${categoryId}`, body);

      console.log("‚úÖ T·∫°o gi·∫£m gi√° cho category th√†nh c√¥ng:", res.data);
      return res.data.discount || res.data;
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o gi·∫£m gi√° cho category:", error);
      throw error;
    }
  },
  async getCategoryDiscount(categoryId: string): Promise<DiscountCategoryService | null> {
      try {
        if (!categoryId || typeof categoryId !== "string" || categoryId.length !== 24) {
          throw new Error("categoryId kh√¥ng h·ª£p l·ªá");
        }

        //console.log("üì° GET discount at:", `/discounts/product/${productId}`);

        const res = await api.get<DiscountCategoryServiceResponse>(`/discounts/categoryService/${categoryId}`);

        const saleOfData = res.data?.discount?.SaleOf;

        if (!saleOfData) {
          console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y discount cho s·∫£n ph·∫©m n√†y.");
          return null;
        }

        // Map d·ªØ li·ªáu backend ‚Üí model FE
        const discount: DiscountCategoryService = {
          _id: saleOfData._id,
          sale_off: saleOfData.sale_off,
          type: saleOfData.type,
          category_service_id: saleOfData.category_service_id,
          start_date: saleOfData.start_date,
          end_date: saleOfData.end_date,
          createdAt: saleOfData.createdAt,
          updatedAt: saleOfData.updatedAt,
        };

        return discount;
      } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y discount:", error);
        return null;
      }
  },
  async updateCategoryDiscount(categoryId: string, body: { sale_off: number; start_date: Date; end_date: Date }) {
    try {
      console.log("üì° PUT update category discount:", `/discounts/categoryService/${categoryId}`, body);
      const res = await api.put(`/discounts/categoryService/${categoryId}`, body);
      console.log("‚úÖ C·∫≠p nh·∫≠t discount th√†nh c√¥ng:", res.data);
      return res.data.discount || res.data;
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t discount:", error);
      throw error;
    }
  },
  async updateCategoryProduct(categoryId: string, body: { sale_off: number; start_date: Date; end_date: Date }) {
    try {
      console.log("üì° PUT update category discount:", `/discounts/categoryService/${categoryId}`, body);
      const res = await api.put(`/discounts/categoryProduct/${categoryId}`, body);
      console.log("‚úÖ C·∫≠p nh·∫≠t discount th√†nh c√¥ng:", res.data);
      return res.data.discount || res.data;
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t discount:", error);
      throw error;
    }
  }
};

