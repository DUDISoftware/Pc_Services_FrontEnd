import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
// import { jwtVerify } from "jose";   // üëâ T·∫°m th·ªùi comment l·∫°i cho test

// const SECRET = new TextEncoder().encode(process.env.JWT_SECRET || "my-secret-key");

// async function verifyToken(token: string) {
//   try {
//     const { payload } = await jwtVerify(token, SECRET);
//     return payload as { role?: string; userId?: string };
//   } catch (e) {
//     return null;
//   }
// }

export async function middleware(req: NextRequest) {
  const token = req.cookies.get("token")?.value;
  const pathname = req.nextUrl.pathname;

  // ‚úÖ Check cho admin (T·∫°m th·ªùi b·ªè qua role check)
  if (pathname.startsWith("/admin")) {
    if (!token) {
      return NextResponse.redirect(new URL("/auth/login", req.url));
    }

    // üëâ B·ªè qua role check, ch·ªâ c·∫ßn c√≥ token l√† v√†o admin
    // const payload = await verifyToken(token);
    // if (!payload?.role || payload.role !== "admin") {
    //   return NextResponse.redirect(new URL("/auth/login", req.url));
    // }
  }

  // ‚úÖ N·∫øu admin ƒë√£ login m√† v√†o "/" ‚Üí ƒë∆∞a v√†o dashboard
  if (pathname === "/") {
    if (token) {
      // const payload = await verifyToken(token);
      // if (payload?.role === "admin") {
      return NextResponse.redirect(new URL("/admin/dashboard", req.url));
      // }
    }
    // N·∫øu ch∆∞a login th√¨ cho v√†o trang user home
    return NextResponse.redirect(new URL("/user/home", req.url));
  }

  // ‚úÖ User side kh√¥ng c·∫ßn check ‚Üí cho ƒëi th·∫≥ng
  return NextResponse.next();
}

// √Åp d·ª•ng middleware cho root v√† admin
export const config = {
  matcher: ["/", "/admin/:path*"],
};
