"use client";

import { useState } from "react";
import {
  DragDropContext,
  Droppable,
  Draggable,
  DropResult,
} from "@hello-pangea/dnd";
import { MoreHorizontal } from "lucide-react";

interface Request {
  id: string;
  customer: string;
  description: string;
  date: string;
}

interface Column {
  id: string;
  title: string;
  requests: Request[];
}

const initialData: Column[] = [
  {
    id: "new",
    title: "üÜï M·ªõi",
    requests: [
      {
        id: "1",
        customer: "Nguy·ªÖn VƒÉn A",
        description: "M√°y t√≠nh kh√¥ng l√™n ngu·ªìn",
        date: "2025-09-01",
      },
      {
        id: "2",
        customer: "Tr·∫ßn Th·ªã B",
        description: "C√†i ƒë·∫∑t Windows 11 + Office",
        date: "2025-08-31",
      },
    ],
  },
  {
    id: "inprogress",
    title: "‚öôÔ∏è ƒêang x·ª≠ l√Ω",
    requests: [
      {
        id: "3",
        customer: "L√™ VƒÉn C",
        description: "Thay RAM 16GB",
        date: "2025-08-30",
      },
    ],
  },
  {
    id: "done",
    title: "‚úÖ Ho√†n th√†nh",
    requests: [
      {
        id: "4",
        customer: "Ph·∫°m Th·ªã D",
        description: "V·ªá sinh laptop",
        date: "2025-08-29",
      },
    ],
  },
];

export default function RequestBoard() {
  const [columns, setColumns] = useState<Column[]>(initialData);

  const handleDragEnd = (result: DropResult) => {
    if (!result.destination) return;

    const { source, destination } = result;
    const updatedColumns = [...columns];

    const sourceCol = updatedColumns.find(
      (col) => col.id === source.droppableId
    )!;
    const destCol = updatedColumns.find(
      (col) => col.id === destination.droppableId
    )!;

    const [movedRequest] = sourceCol.requests.splice(source.index, 1);
    destCol.requests.splice(destination.index, 0, movedRequest);

    setColumns(updatedColumns);
  };

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      <h2 className="text-2xl font-bold mb-6 text-center">
        üìã B·∫£ng qu·∫£n l√Ω y√™u c·∫ßu kh√°ch h√†ng
      </h2>

      <DragDropContext onDragEnd={handleDragEnd}>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {columns.map((col) => (
            <Droppable key={col.id} droppableId={col.id}>
              {(provided, snapshot) => (
                <div
                  ref={provided.innerRef}
                  {...provided.droppableProps}
                  className={`p-4 rounded-xl shadow-md bg-white transition ${
                    snapshot.isDraggingOver ? "bg-blue-50" : ""
                  }`}
                >
                  <h3 className="text-lg font-semibold mb-3">{col.title}</h3>
                  <div className="space-y-4">
                    {col.requests.map((req, index) => (
                      <Draggable key={req.id} draggableId={req.id} index={index}>
                        {(provided, snapshot) => (
                          <div
                            ref={provided.innerRef}
                            {...provided.draggableProps}
                            {...provided.dragHandleProps}
                            className={`p-4 border rounded-lg shadow-sm bg-gray-50 transition ${
                              snapshot.isDragging
                                ? "bg-blue-100 border-blue-400"
                                : "hover:bg-gray-100"
                            }`}
                          >
                            <div className="flex justify-between items-start">
                              <div>
                                <p className="font-semibold text-gray-800">
                                  {req.customer}
                                </p>
                                <p className="text-sm text-gray-600">
                                  {req.description}
                                </p>
                              </div>
                              <button className="text-gray-500 hover:text-gray-700">
                                <MoreHorizontal size={18} />
                              </button>
                            </div>
                            <p className="text-xs text-gray-400 mt-2">
                              Ng√†y: {req.date}
                            </p>
                          </div>
                        )}
                      </Draggable>
                    ))}
                    {provided.placeholder}
                  </div>
                </div>
              )}
            </Droppable>
          ))}
        </div>
      </DragDropContext>
    </div>
  );
}
